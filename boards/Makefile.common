# Remove built-in rules and variables
# n.b. no-op for make --version < 4.0
MAKEFLAGS += -r
MAKEFLAGS += -R

export RUSTUP_TOOLCHAIN ?= nightly-2017-09-20

TOOLCHAIN ?= arm-none-eabi

XARGO ?= xargo
MINIMUM_XARGO_VERSION ?= 0.3.08
# This will hopefully move into Cargo.toml (or Cargo.toml.local) eventually
RUSTFLAGS_FOR_XARGO_LINKING := "-C link-arg=-nostartfiles -C link-arg=-Tlayout.ld"

CC        := $(TOOLCHAIN)-gcc
SIZE      ?= $(TOOLCHAIN)-size
OBJCOPY   ?= $(TOOLCHAIN)-objcopy
OBJDUMP   ?= $(TOOLCHAIN)-objdump
OBJDUMP_FLAGS += --disassemble-all --source --disassembler-options=force-thumb -C --section-headers

ifndef PLATFORM
$(error Required make vairable PLATFORM is not defined)
endif

# If environment variable V is non-empty, be verbose
ifneq ($(V),)
Q=
VERBOSE = --verbose
else
Q=@
VERBOSE =
endif

export TOCK_KERNEL_VERSION := $(shell git describe --always || echo notgit)


# Check that gcc version is new enough (> 5.1) - used during linking
CC_VERSION_MAJOR := $(shell $(TOOLCHAIN)-gcc -dumpversion | cut -d '.' -f1)
ifeq (1,$(shell expr $(CC_VERSION_MAJOR) \>= 6))
  # no-op
else
  ifneq (5,$(CC_VERSION_MAJOR))
    $(info CC=$(CC))
    $(info $$(CC) -dumpversion: $(shell $(CC) -dumpversion))
    $(error Your compiler is too old. Need gcc version > 5.1)
  endif
    CC_VERSION_MINOR := $(shell $(CC) -dumpversion | cut -d '.' -f2)
  ifneq (1,$(shell expr $(CC_VERSION_MINOR) \> 1))
    $(info CC=$(CC))
    $(info $$(CC) -dumpversion: $(shell $(CC) -dumpversion))
    $(error Your compiler is too old. Need gcc version > 5.1)
  endif
endif


# Check that rustc is the right nightly - warn not error if wrong, sometimes useful to test others
RUSTC_VERSION_STRING := rustc 1.22.0-nightly (325ba23d5 2017-09-19)
ifneq ($(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) rustc --version), $(RUSTC_VERSION_STRING))
  DUMMY := $(shell rustup install $(RUSTUP_TOOLCHAIN))
  ifneq ($(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) rustc --version), $(RUSTC_VERSION_STRING))
    $(warning You do not have the correct version of `rustc` configured, and `rustup` is not installed.)
    $(warning Expected `rustc` version "$(RUSTC_VERSION_STRING)" but got "$(shell rustc --version)")
    $(warning You may experience unexpected compilation warnings or errors)
    $(warning To fix, install `rustup` from https://rustup.rs/, then run: `rustup install $(RUSTUP_TOOLCHAIN)`)
  endif
endif

ifneq ($(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) rustup component list | grep rust-src),rust-src (installed))
  $(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) rustup component add rust-src)
endif

# Check that xargo is installed and up-to-date
XARGO_CALL := $(shell $(XARGO) --version 2>&1)
XARGO_NAME := $(strip $(firstword $(XARGO_CALL)))
XARGO_VERSION := $(strip $(word 2, $(XARGO_CALL)))
ifneq ($(XARGO_NAME), xargo)
  $(warning Required tool `xargo` not installed.)
  $(warning Running `cargo install xargo` in 3 seconds (ctrl-c to cancel))
  $(shell sleep 3s)
  $(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) cargo install xargo)
  XARGO_VERSION := $(strip $(word 2, $(XARGO_CALL)))
else ifeq ($(shell expr $(XARGO_VERSION) \< $(MINIMUM_XARGO_VERSION)), 1)
  $(warning Required tool `xargo` is out-of-date.)
  $(warning Running `cargo install cargo-update` and `cargo install-update xargo` in 3 seconds (ctrl-c to cancel))
  $(shell sleep 3s)
  $(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) cargo install cargo-update)
  XARGO_UPDATE_RESULT := $(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) cargo install-update xargo))
  $(info $(XARGO_UPDATE_RESULT))
  XARGO_VERSION := $(strip $(word 2, $(XARGO_CALL)))
endif

# Dump configuration for verbose builds
ifneq ($(V),)
  $(info )
  $(info **************************************************)
  $(info TOCK KERNEL BUILD SYSTEM -- VERBOSE BUILD)
  $(info **************************************************)
  $(info Config:)
  $(info MAKEFLAGS=$(MAKEFLAGS))
  $(info OBJCOPY=$(OBJCOPY))
  $(info PLATFORM=$(PLATFORM))
  $(info RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN))
  $(info XARGO_VERSION=$(XARGO_VERSION))
  $(info TARGET=$(TARGET))
  $(info TOCK_KERNEL_VERSION=$(TOCK_KERNEL_VERSION))
  $(info TOOLCHAIN=$(TOOLCHAIN))
  $(info )
  $(info $(OBJCOPY) --version = $(shell $(OBJCOPY) --version))
  $(info rustc --version = $(shell rustc --version))
  $(info **************************************************)
  $(info )
endif

.PHONY: all
all:	target/$(TARGET)/release/$(PLATFORM).bin

.PHONY: lst
lst:	target/$(TARGET)/release/$(PLATFORM).lst

.PHONY: debug
debug:	target/$(TARGET)/debug/$(PLATFORM).bin

target:
	@mkdir -p target

.PHONY: doc
doc: | target
	@# Need to make a wrapper script so we can pass flags to `rustdoc`.
	@# This allows us to tell rustdoc to document internal functions and fields.
	$(Q)printf '#!/bin/bash\nexec rustdoc $$@ --no-defaults --passes "collapse-docs" --passes "unindent-comments"\n' > target/rustdoc
	$(Q)chmod +x target/rustdoc
	$(Q)RUSTDOC=target/rustdoc $(XARGO) doc $(VERBOSE) --release --target=$(TARGET)

target/$(TARGET)/release/$(PLATFORM).elf: target/$(TARGET)/release/$(PLATFORM)
	$(Q)cp target/$(TARGET)/release/$(PLATFORM) target/$(TARGET)/release/$(PLATFORM).elf

target/$(TARGET)/release/$(PLATFORM).lst: target/$(TARGET)/release/$(PLATFORM).elf
	$(Q)$(OBJDUMP) $(OBJDUMP_FLAGS) $< > target/$(TARGET)/release/$(PLATFORM).lst

.PHONY: target/$(TARGET)/release/$(PLATFORM)
target/$(TARGET)/release/$(PLATFORM):
	$(Q)RUSTFLAGS=$(RUSTFLAGS_FOR_XARGO_LINKING) $(XARGO) build --target=$(TARGET) $(VERBOSE) --release
	$(Q)$(SIZE) $@

target/$(TARGET)/debug/$(PLATFORM).elf: target/$(TARGET)/debug/$(PLATFORM)
	$(Q)cp target/$(TARGET)/debug/$(PLATFORM) target/$(TARGET)/debug/$(PLATFORM).elf

.PHONY: target/$(TARGET)/debug/$(PLATFORM)
target/$(TARGET)/debug/$(PLATFORM):
	$(Q)RUSTFLAGS=$(RUSTFLAGS_FOR_XARGO_LINKING) $(XARGO) build $(VERBOSE) --target=$(TARGET)
	$(Q)$(OBJDUMP) $(OBJDUMP_FLAGS) $@ > target/$(TARGET)/debug/$(PLATFORM).lst
	$(Q)$(SIZE) $@

target/$(TARGET)/release/$(PLATFORM).hex: target/$(TARGET)/release/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Oihex $^ $@

target/$(TARGET)/debug/$(PLATFORM).hex: target/$(TARGET)/debug/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Oihex $^ $@

target/$(TARGET)/release/$(PLATFORM).bin: target/$(TARGET)/release/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Obinary $^ $@

target/$(TARGET)/debug/$(PLATFORM).bin: target/$(TARGET)/debug/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Obinary $^ $@

# `make check` runs the Rust compiler but does not actually output the final
# binary. This makes checking for Rust errors much faster.
.PHONY: check
check:
	$(Q)RUSTFLAGS=$(RUSTFLAGS_FOR_XARGO_LINKING) $(XARGO) check --target=$(TARGET) $(VERBOSE) --release

.PHONY: clean
clean::
	$(Q)$(XARGO) clean $(VERBOSE)

.PHONY: debug
debug: target/$(TARGET)/debug/$(PLATFORM).elf
